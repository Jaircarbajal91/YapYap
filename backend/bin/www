#!/usr/bin/env node
// backend/bin/www

// Import environment variables
require("dotenv").config();
const { createServer } = require("http");
const { environment } = require('../config');
const isProduction = environment === 'production';
const db = require("../db/models");
const {User, Message, DirectMessage} = require("../db/models");
const { Server } = require("socket.io");
// const socketio = require("socket.io");
const { port } = require("../config");

const app = require("../app");
const server = createServer(app);

// const io = require('socket.io')(server);
const options = !isProduction ? { cors: {
	origin: "http://localhost:3000",
	// methods: ["GET", "POST"],
}} : {};
const io = new Server(server, options);

io.on("connection", (socket) => {
  console.log(`New client connected ${socket.id}`);
	socket.on("joinRoom", (data) => {
		socket.join(data.room);
		console.log(data);
	});
	socket.on("chatMessage", async (data) => {
		console.log(data);
		socket.to(data.room).emit("receivedMessage", data);
		const message = await Message.create({
			senderId: data.userId,
			message: data.newMessage,
			channelId: data?.channelId || null,
			imageId: data?.imageId || null,
			dmId: data?.dmId || null,
		});
	});
  socket.on("disconnect", () => console.log("Client disconnected"));
});

// Check the database connection before starting the app
db.sequelize
  .authenticate()
  .then(() => {
    console.log("Database connection success! Sequelize is ready to use...");

    // Start listening for connections
    server.listen(port, () =>
      console.log(`Server listening on port ${port}...`)
    );
    // app.listen(port, () => console.log(`Listening on port ${port}...`));
  })
  .catch((err) => {
    console.log("Database connection failure.");
    console.error(err);
  });
